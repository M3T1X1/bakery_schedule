// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bakery_Schedule.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250530130130_DodajIDPracownikaDoZmiany")]
    partial class DodajIDPracownikaDoZmiany
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("Bakery_Schedule.modele.Adres", b =>
                {
                    b.Property<int>("ID_adresu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Klatka")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Miasto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NrDomu")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NrMieszkania")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID_adresu");

                    b.ToTable("Adres");
                });

            modelBuilder.Entity("Bakery_Schedule.modele.Pracownik", b =>
                {
                    b.Property<int>("ID_pracownika")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ID_adresu")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ID_produktu")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ID_stanowiska")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LataDoswiadczenia")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RodzajUmowy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID_pracownika");

                    b.HasIndex("ID_adresu");

                    b.HasIndex("ID_produktu");

                    b.HasIndex("ID_stanowiska");

                    b.ToTable("Pracownik");
                });

            modelBuilder.Entity("Bakery_Schedule.modele.Produkt", b =>
                {
                    b.Property<int>("ID_produktu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ŚredniKosztProdukcji")
                        .HasColumnType("TEXT");

                    b.HasKey("ID_produktu");

                    b.ToTable("Produkt");
                });

            modelBuilder.Entity("Bakery_Schedule.modele.Stanowisko", b =>
                {
                    b.Property<int>("ID_stanowiska")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ID_produktu")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NazwaStanowiska")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Poziom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ZarobkiNaGodzine")
                        .HasColumnType("TEXT");

                    b.HasKey("ID_stanowiska");

                    b.HasIndex("ID_produktu");

                    b.ToTable("Stanowisko");
                });

            modelBuilder.Entity("Bakery_Schedule.modele.Zmiana", b =>
                {
                    b.Property<int>("ID_zmiany")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ID_pracownika")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("KoniecZmiany")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("PoczatekZmiany")
                        .HasColumnType("TEXT");

                    b.HasKey("ID_zmiany");

                    b.HasIndex("ID_pracownika");

                    b.ToTable("Zmiana");
                });

            modelBuilder.Entity("Bakery_Schedule.modele.Pracownik", b =>
                {
                    b.HasOne("Bakery_Schedule.modele.Adres", "Adres")
                        .WithMany("Pracownicy")
                        .HasForeignKey("ID_adresu")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Bakery_Schedule.modele.Produkt", "Produkt")
                        .WithMany()
                        .HasForeignKey("ID_produktu")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Bakery_Schedule.modele.Stanowisko", "Stanowisko")
                        .WithMany("Pracownicy")
                        .HasForeignKey("ID_stanowiska")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Adres");

                    b.Navigation("Produkt");

                    b.Navigation("Stanowisko");
                });

            modelBuilder.Entity("Bakery_Schedule.modele.Stanowisko", b =>
                {
                    b.HasOne("Bakery_Schedule.modele.Produkt", "Produkt")
                        .WithMany("Stanowiska")
                        .HasForeignKey("ID_produktu")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Produkt");
                });

            modelBuilder.Entity("Bakery_Schedule.modele.Zmiana", b =>
                {
                    b.HasOne("Bakery_Schedule.modele.Pracownik", "Pracownik")
                        .WithMany("Zmiany")
                        .HasForeignKey("ID_pracownika")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Pracownik");
                });

            modelBuilder.Entity("Bakery_Schedule.modele.Adres", b =>
                {
                    b.Navigation("Pracownicy");
                });

            modelBuilder.Entity("Bakery_Schedule.modele.Pracownik", b =>
                {
                    b.Navigation("Zmiany");
                });

            modelBuilder.Entity("Bakery_Schedule.modele.Produkt", b =>
                {
                    b.Navigation("Stanowiska");
                });

            modelBuilder.Entity("Bakery_Schedule.modele.Stanowisko", b =>
                {
                    b.Navigation("Pracownicy");
                });
#pragma warning restore 612, 618
        }
    }
}
